{"ast":null,"code":"import sync, { cancelSync } from 'framesync';\nimport { useRef, useContext, useEffect } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\n\nfunction useAnimationFrame(callback) {\n  const initialTimestamp = useRef(0);\n  const {\n    isStatic\n  } = useContext(MotionConfigContext);\n  useEffect(() => {\n    if (isStatic) return;\n\n    const provideTimeSinceStart = _ref => {\n      let {\n        timestamp,\n        delta\n      } = _ref;\n      if (!initialTimestamp.current) initialTimestamp.current = timestamp;\n      callback(timestamp - initialTimestamp.current, delta);\n    };\n\n    sync.update(provideTimeSinceStart, true);\n    return () => cancelSync.update(provideTimeSinceStart);\n  }, [callback]);\n}\n\nexport { useAnimationFrame };","map":{"version":3,"sources":["E:/react-portfolio/portfolio-starter/node_modules/framer-motion/dist/es/utils/use-animation-frame.mjs"],"names":["sync","cancelSync","useRef","useContext","useEffect","MotionConfigContext","useAnimationFrame","callback","initialTimestamp","isStatic","provideTimeSinceStart","timestamp","delta","current","update"],"mappings":"AAAA,OAAOA,IAAP,IAAeC,UAAf,QAAiC,WAAjC;AACA,SAASC,MAAT,EAAiBC,UAAjB,EAA6BC,SAA7B,QAA8C,OAA9C;AACA,SAASC,mBAAT,QAAoC,oCAApC;;AAEA,SAASC,iBAAT,CAA2BC,QAA3B,EAAqC;AACjC,QAAMC,gBAAgB,GAAGN,MAAM,CAAC,CAAD,CAA/B;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAeN,UAAU,CAACE,mBAAD,CAA/B;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIK,QAAJ,EACI;;AACJ,UAAMC,qBAAqB,GAAG,QAA0B;AAAA,UAAzB;AAAEC,QAAAA,SAAF;AAAaC,QAAAA;AAAb,OAAyB;AACpD,UAAI,CAACJ,gBAAgB,CAACK,OAAtB,EACIL,gBAAgB,CAACK,OAAjB,GAA2BF,SAA3B;AACJJ,MAAAA,QAAQ,CAACI,SAAS,GAAGH,gBAAgB,CAACK,OAA9B,EAAuCD,KAAvC,CAAR;AACH,KAJD;;AAKAZ,IAAAA,IAAI,CAACc,MAAL,CAAYJ,qBAAZ,EAAmC,IAAnC;AACA,WAAO,MAAMT,UAAU,CAACa,MAAX,CAAkBJ,qBAAlB,CAAb;AACH,GAVQ,EAUN,CAACH,QAAD,CAVM,CAAT;AAWH;;AAED,SAASD,iBAAT","sourcesContent":["import sync, { cancelSync } from 'framesync';\nimport { useRef, useContext, useEffect } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\n\nfunction useAnimationFrame(callback) {\n    const initialTimestamp = useRef(0);\n    const { isStatic } = useContext(MotionConfigContext);\n    useEffect(() => {\n        if (isStatic)\n            return;\n        const provideTimeSinceStart = ({ timestamp, delta }) => {\n            if (!initialTimestamp.current)\n                initialTimestamp.current = timestamp;\n            callback(timestamp - initialTimestamp.current, delta);\n        };\n        sync.update(provideTimeSinceStart, true);\n        return () => cancelSync.update(provideTimeSinceStart);\n    }, [callback]);\n}\n\nexport { useAnimationFrame };\n"]},"metadata":{},"sourceType":"module"}