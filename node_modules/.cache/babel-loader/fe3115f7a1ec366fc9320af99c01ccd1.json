{"ast":null,"code":"import sync, { cancelSync } from 'framesync';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { variantPriorityOrder } from './utils/animation-state.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { createLifecycles } from './utils/lifecycles.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { env } from '../utils/process.mjs';\nimport { invariant } from 'hey-listen';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { createElement } from 'react';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\n\nconst visualElement = _ref => {\n  let {\n    treeType = \"\",\n    build,\n    getBaseTarget,\n    makeTargetAnimatable,\n    measureViewportBox,\n    render: renderInstance,\n    readValueFromInstance,\n    removeValueFromRenderState,\n    sortNodePosition,\n    scrapeMotionValuesFromProps\n  } = _ref;\n  return function (_ref2) {\n    let {\n      parent,\n      props,\n      presenceId,\n      blockInitialAnimation,\n      visualState,\n      reducedMotionConfig\n    } = _ref2;\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let isMounted = false;\n    const {\n      latestValues,\n      renderState\n    } = visualState;\n    /**\n     * The instance of the render-specific node that will be hydrated by the\n     * exposed React ref. So for example, this visual element can host a\n     * HTMLElement, plain object, or Three.js object. The functions provided\n     * in VisualElementConfig allow us to interface with this instance.\n     */\n\n    let instance;\n    /**\n     * Manages the subscriptions for a visual element's lifecycle, for instance\n     * onRender\n     */\n\n    const lifecycles = createLifecycles();\n    /**\n     * A map of all motion values attached to this visual element. Motion\n     * values are source of truth for any given animated value. A motion\n     * value might be provided externally by the component via props.\n     */\n\n    const values = new Map();\n    /**\n     * A map of every subscription that binds the provided or generated\n     * motion values onChange listeners to this visual element.\n     */\n\n    const valueSubscriptions = new Map();\n    /**\n     * A reference to the previously-provided motion values as returned\n     * from scrapeMotionValuesFromProps. We use the keys in here to determine\n     * if any motion values need to be removed after props are updated.\n     */\n\n    let prevMotionValues = {};\n    /**\n     * When values are removed from all animation props we need to search\n     * for a fallback value to animate to. These values are tracked in baseTarget.\n     */\n\n    const baseTarget = { ...latestValues\n    };\n    /**\n     * Create an object of the values we initially animated from (if initial prop present).\n     */\n\n    const initialValues = props.initial ? { ...latestValues\n    } : {}; // Internal methods ========================\n\n    /**\n     * On mount, this will be hydrated with a callback to disconnect\n     * this visual element from its parent on unmount.\n     */\n\n    let removeFromVariantTree;\n    /**\n     * Render the element with the latest styles outside of the React\n     * render lifecycle\n     */\n\n    function render() {\n      if (!instance || !isMounted) return;\n      triggerBuild();\n      renderInstance(instance, renderState, props.style, element.projection);\n    }\n\n    function triggerBuild() {\n      build(element, renderState, latestValues, options, props);\n    }\n\n    function update() {\n      lifecycles.notifyUpdate(latestValues);\n    }\n    /**\n     *\n     */\n\n\n    function bindToMotionValue(key, value) {\n      const removeOnChange = value.onChange(latestValue => {\n        latestValues[key] = latestValue;\n        props.onUpdate && sync.update(update, false, true);\n      });\n      const removeOnRenderRequest = value.onRenderRequest(element.scheduleRender);\n      valueSubscriptions.set(key, () => {\n        removeOnChange();\n        removeOnRenderRequest();\n      });\n    }\n    /**\n     * Any motion values that are provided to the element when created\n     * aren't yet bound to the element, as this would technically be impure.\n     * However, we iterate through the motion values and set them to the\n     * initial values for this component.\n     *\n     * TODO: This is impure and we should look at changing this to run on mount.\n     * Doing so will break some tests but this isn't neccessarily a breaking change,\n     * more a reflection of the test.\n     */\n\n\n    const {\n      willChange,\n      ...initialMotionValues\n    } = scrapeMotionValuesFromProps(props);\n\n    for (const key in initialMotionValues) {\n      const value = initialMotionValues[key];\n\n      if (latestValues[key] !== undefined && isMotionValue(value)) {\n        value.set(latestValues[key], false);\n\n        if (isWillChangeMotionValue(willChange)) {\n          willChange.add(key);\n        }\n      }\n    }\n    /**\n     * Update external values with initial values\n     */\n\n\n    if (props.values) {\n      for (const key in props.values) {\n        const value = props.values[key];\n\n        if (latestValues[key] !== undefined && isMotionValue(value)) {\n          value.set(latestValues[key]);\n        }\n      }\n    }\n    /**\n     * Determine what role this visual element should take in the variant tree.\n     */\n\n\n    const isControllingVariants$1 = isControllingVariants(props);\n    const isVariantNode$1 = isVariantNode(props);\n    const element = {\n      treeType,\n\n      /**\n       * This is a mirror of the internal instance prop, which keeps\n       * VisualElement type-compatible with React's RefObject.\n       */\n      current: null,\n\n      /**\n       * The depth of this visual element within the visual element tree.\n       */\n      depth: parent ? parent.depth + 1 : 0,\n      parent,\n      children: new Set(),\n\n      /**\n       *\n       */\n      presenceId,\n      shouldReduceMotion: null,\n\n      /**\n       * If this component is part of the variant tree, it should track\n       * any children that are also part of the tree. This is essentially\n       * a shadow tree to simplify logic around how to stagger over children.\n       */\n      variantChildren: isVariantNode$1 ? new Set() : undefined,\n\n      /**\n       * Whether this instance is visible. This can be changed imperatively\n       * by the projection tree, is analogous to CSS's visibility in that\n       * hidden elements should take up layout, and needs enacting by the configured\n       * render function.\n       */\n      isVisible: undefined,\n\n      /**\n       * Normally, if a component is controlled by a parent's variants, it can\n       * rely on that ancestor to trigger animations further down the tree.\n       * However, if a component is created after its parent is mounted, the parent\n       * won't trigger that mount animation so the child needs to.\n       *\n       * TODO: This might be better replaced with a method isParentMounted\n       */\n      manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()),\n\n      /**\n       * This can be set by AnimatePresence to force components that mount\n       * at the same time as it to mount as if they have initial={false} set.\n       */\n      blockInitialAnimation,\n\n      /**\n       * Determine whether this component has mounted yet. This is mostly used\n       * by variant children to determine whether they need to trigger their\n       * own animations on mount.\n       */\n      isMounted: () => Boolean(instance),\n\n      mount(newInstance) {\n        isMounted = true;\n        instance = element.current = newInstance;\n\n        if (element.projection) {\n          element.projection.mount(newInstance);\n        }\n\n        if (isVariantNode$1 && parent && !isControllingVariants$1) {\n          removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);\n        }\n\n        values.forEach((value, key) => bindToMotionValue(key, value));\n\n        if (!hasReducedMotionListener.current) {\n          initPrefersReducedMotion();\n        }\n\n        element.shouldReduceMotion = reducedMotionConfig === \"never\" ? false : reducedMotionConfig === \"always\" ? true : prefersReducedMotion.current;\n        parent === null || parent === void 0 ? void 0 : parent.children.add(element);\n        element.setProps(props);\n      },\n\n      /**\n       *\n       */\n      unmount() {\n        var _a;\n\n        (_a = element.projection) === null || _a === void 0 ? void 0 : _a.unmount();\n        cancelSync.update(update);\n        cancelSync.render(render);\n        valueSubscriptions.forEach(remove => remove());\n        removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();\n        parent === null || parent === void 0 ? void 0 : parent.children.delete(element);\n        lifecycles.clearAllListeners();\n        instance = undefined;\n        isMounted = false;\n      },\n\n      loadFeatures(renderedProps, isStrict, preloadedFeatures, projectionId, ProjectionNodeConstructor, initialLayoutGroupConfig) {\n        const features = [];\n        /**\n         * If we're in development mode, check to make sure we're not rendering a motion component\n         * as a child of LazyMotion, as this will break the file-size benefits of using it.\n         */\n\n        if (env !== \"production\" && preloadedFeatures && isStrict) {\n          invariant(false, \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\");\n        }\n\n        for (let i = 0; i < numFeatures; i++) {\n          const name = featureNames[i];\n          const {\n            isEnabled,\n            Component\n          } = featureDefinitions[name];\n          /**\n           * It might be possible in the future to use this moment to\n           * dynamically request functionality. In initial tests this\n           * was producing a lot of duplication amongst bundles.\n           */\n\n          if (isEnabled(renderedProps) && Component) {\n            features.push(createElement(Component, {\n              key: name,\n              ...renderedProps,\n              visualElement: element\n            }));\n          }\n        }\n\n        if (!element.projection && ProjectionNodeConstructor) {\n          element.projection = new ProjectionNodeConstructor(projectionId, element.getLatestValues(), parent && parent.projection);\n          const {\n            layoutId,\n            layout,\n            drag,\n            dragConstraints,\n            layoutScroll\n          } = renderedProps;\n          element.projection.setOptions({\n            layoutId,\n            layout,\n            alwaysMeasureLayout: Boolean(drag) || dragConstraints && isRefObject(dragConstraints),\n            visualElement: element,\n            scheduleRender: () => element.scheduleRender(),\n\n            /**\n             * TODO: Update options in an effect. This could be tricky as it'll be too late\n             * to update by the time layout animations run.\n             * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n             * ensuring it gets called if there's no potential layout animations.\n             *\n             */\n            animationType: typeof layout === \"string\" ? layout : \"both\",\n            initialPromotionConfig: initialLayoutGroupConfig,\n            layoutScroll\n          });\n        }\n\n        return features;\n      },\n\n      /**\n       * Add a child visual element to our set of children.\n       */\n      addVariantChild(child) {\n        var _a;\n\n        const closestVariantNode = element.getClosestVariantNode();\n\n        if (closestVariantNode) {\n          (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n          return () => closestVariantNode.variantChildren.delete(child);\n        }\n      },\n\n      sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!sortNodePosition || treeType !== other.treeType) return 0;\n        return sortNodePosition(element.getInstance(), other.getInstance());\n      },\n\n      /**\n       * Returns the closest variant node in the tree starting from\n       * this visual element.\n       */\n      getClosestVariantNode: () => isVariantNode$1 ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode(),\n\n      /**\n       * Expose the latest layoutId prop.\n       */\n      getLayoutId: () => props.layoutId,\n\n      /**\n       * Returns the current instance.\n       */\n      getInstance: () => instance,\n\n      /**\n       * Get/set the latest static values.\n       */\n      getStaticValue: key => latestValues[key],\n      setStaticValue: (key, value) => latestValues[key] = value,\n\n      /**\n       * Returns the latest motion value state. Currently only used to take\n       * a snapshot of the visual element - perhaps this can return the whole\n       * visual state\n       */\n      getLatestValues: () => latestValues,\n\n      /**\n       * Set the visiblity of the visual element. If it's changed, schedule\n       * a render to reflect these changes.\n       */\n      setVisibility(visibility) {\n        if (element.isVisible === visibility) return;\n        element.isVisible = visibility;\n        element.scheduleRender();\n      },\n\n      /**\n       * Make a target animatable by Popmotion. For instance, if we're\n       * trying to animate width from 100px to 100vw we need to measure 100vw\n       * in pixels to determine what we really need to animate to. This is also\n       * pluggable to support Framer's custom value types like Color,\n       * and CSS variables.\n       */\n      makeTargetAnimatable(target) {\n        let canMutate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        return makeTargetAnimatable(element, target, props, canMutate);\n      },\n\n      /**\n       * Measure the current viewport box with or without transforms.\n       * Only measures axis-aligned boxes, rotate and skew must be manually\n       * removed with a re-render to work.\n       */\n      measureViewportBox() {\n        return measureViewportBox(instance, props);\n      },\n\n      // Motion values ========================\n\n      /**\n       * Add a motion value and bind it to this visual element.\n       */\n      addValue(key, value) {\n        // Remove existing value if it exists\n        if (element.hasValue(key)) element.removeValue(key);\n        values.set(key, value);\n        latestValues[key] = value.get();\n        bindToMotionValue(key, value);\n      },\n\n      /**\n       * Remove a motion value and unbind any active subscriptions.\n       */\n      removeValue(key) {\n        var _a;\n\n        values.delete(key);\n        (_a = valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n        valueSubscriptions.delete(key);\n        delete latestValues[key];\n        removeValueFromRenderState(key, renderState);\n      },\n\n      /**\n       * Check whether we have a motion value for this key\n       */\n      hasValue: key => values.has(key),\n\n      /**\n       * Get a motion value for this key. If called with a default\n       * value, we'll create one if none exists.\n       */\n      getValue(key, defaultValue) {\n        if (props.values && props.values[key]) {\n          return props.values[key];\n        }\n\n        let value = values.get(key);\n\n        if (value === undefined && defaultValue !== undefined) {\n          value = motionValue(defaultValue);\n          element.addValue(key, value);\n        }\n\n        return value;\n      },\n\n      /**\n       * Iterate over our motion values.\n       */\n      forEachValue: callback => values.forEach(callback),\n\n      /**\n       * If we're trying to animate to a previously unencountered value,\n       * we need to check for it in our state and as a last resort read it\n       * directly from the instance (which might have performance implications).\n       */\n      readValue: key => latestValues[key] !== undefined ? latestValues[key] : readValueFromInstance(instance, key, options),\n\n      /**\n       * Set the base target to later animate back to. This is currently\n       * only hydrated on creation and when we first read a value.\n       */\n      setBaseTarget(key, value) {\n        baseTarget[key] = value;\n      },\n\n      /**\n       * Find the base target for a value thats been removed from all animation\n       * props.\n       */\n      getBaseTarget(key) {\n        var _a;\n\n        const {\n          initial\n        } = props;\n        const valueFromInitial = typeof initial === \"string\" || typeof initial === \"object\" ? (_a = resolveVariantFromProps(props, initial)) === null || _a === void 0 ? void 0 : _a[key] : undefined;\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n\n        if (initial && valueFromInitial !== undefined) {\n          return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n\n\n        if (getBaseTarget) {\n          const target = getBaseTarget(props, key);\n          if (target !== undefined && !isMotionValue(target)) return target;\n        }\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n\n\n        return initialValues[key] !== undefined && valueFromInitial === undefined ? undefined : baseTarget[key];\n      },\n\n      // Lifecyles ========================\n      ...lifecycles,\n\n      /**\n       * Build the renderer state based on the latest visual state.\n       */\n      build() {\n        triggerBuild();\n        return renderState;\n      },\n\n      /**\n       * Schedule a render on the next animation frame.\n       */\n      scheduleRender() {\n        sync.render(render, false, true);\n      },\n\n      /**\n       * Synchronously fire render. It's prefered that we batch renders but\n       * in many circumstances, like layout measurement, we need to run this\n       * synchronously. However in those instances other measures should be taken\n       * to batch reads/writes.\n       */\n      syncRender: render,\n\n      /**\n       * Update the provided props. Ensure any newly-added motion values are\n       * added to our map, old ones removed, and listeners updated.\n       */\n      setProps(newProps) {\n        if (newProps.transformTemplate || props.transformTemplate) {\n          element.scheduleRender();\n        }\n\n        props = newProps;\n        lifecycles.updatePropListeners(newProps);\n        prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps(props), prevMotionValues);\n      },\n\n      getProps: () => props,\n      // Variants ==============================\n\n      /**\n       * Returns the variant definition with a given name.\n       */\n      getVariant: name => {\n        var _a;\n\n        return (_a = props.variants) === null || _a === void 0 ? void 0 : _a[name];\n      },\n\n      /**\n       * Returns the defined default transition on this component.\n       */\n      getDefaultTransition: () => props.transition,\n      getTransformPagePoint: () => {\n        return props.transformPagePoint;\n      },\n\n      /**\n       * Used by child variant nodes to get the closest ancestor variant props.\n       */\n      getVariantContext() {\n        let startAtParent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        if (startAtParent) return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();\n\n        if (!isControllingVariants$1) {\n          const context = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};\n\n          if (props.initial !== undefined) {\n            context.initial = props.initial;\n          }\n\n          return context;\n        }\n\n        const context = {};\n\n        for (let i = 0; i < numVariantProps; i++) {\n          const name = variantProps[i];\n          const prop = props[name];\n\n          if (isVariantLabel(prop) || prop === false) {\n            context[name] = prop;\n          }\n        }\n\n        return context;\n      }\n\n    };\n    return element;\n  };\n};\n\nconst variantProps = [\"initial\", ...variantPriorityOrder];\nconst numVariantProps = variantProps.length;\nexport { visualElement };","map":{"version":3,"sources":["E:/react-portfolio/portfolio-starter/node_modules/framer-motion/dist/es/render/index.mjs"],"names":["sync","cancelSync","initPrefersReducedMotion","hasReducedMotionListener","prefersReducedMotion","motionValue","isWillChangeMotionValue","isMotionValue","variantPriorityOrder","isVariantLabel","createLifecycles","updateMotionValuesFromProps","isControllingVariants","isVariantNode","env","invariant","featureDefinitions","createElement","isRefObject","resolveVariantFromProps","featureNames","Object","keys","numFeatures","length","visualElement","treeType","build","getBaseTarget","makeTargetAnimatable","measureViewportBox","render","renderInstance","readValueFromInstance","removeValueFromRenderState","sortNodePosition","scrapeMotionValuesFromProps","parent","props","presenceId","blockInitialAnimation","visualState","reducedMotionConfig","options","isMounted","latestValues","renderState","instance","lifecycles","values","Map","valueSubscriptions","prevMotionValues","baseTarget","initialValues","initial","removeFromVariantTree","triggerBuild","style","element","projection","update","notifyUpdate","bindToMotionValue","key","value","removeOnChange","onChange","latestValue","onUpdate","removeOnRenderRequest","onRenderRequest","scheduleRender","set","willChange","initialMotionValues","undefined","add","isControllingVariants$1","isVariantNode$1","current","depth","children","Set","shouldReduceMotion","variantChildren","isVisible","manuallyAnimateOnMount","Boolean","mount","newInstance","addVariantChild","forEach","setProps","unmount","_a","remove","delete","clearAllListeners","loadFeatures","renderedProps","isStrict","preloadedFeatures","projectionId","ProjectionNodeConstructor","initialLayoutGroupConfig","features","i","name","isEnabled","Component","push","getLatestValues","layoutId","layout","drag","dragConstraints","layoutScroll","setOptions","alwaysMeasureLayout","animationType","initialPromotionConfig","child","closestVariantNode","getClosestVariantNode","other","getInstance","getLayoutId","getStaticValue","setStaticValue","setVisibility","visibility","target","canMutate","addValue","hasValue","removeValue","get","has","getValue","defaultValue","forEachValue","callback","readValue","setBaseTarget","valueFromInitial","syncRender","newProps","transformTemplate","updatePropListeners","getProps","getVariant","variants","getDefaultTransition","transition","getTransformPagePoint","transformPagePoint","getVariantContext","startAtParent","context","numVariantProps","variantProps","prop"],"mappings":"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","sourcesContent":["import sync, { cancelSync } from 'framesync';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { variantPriorityOrder } from './utils/animation-state.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { createLifecycles } from './utils/lifecycles.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { env } from '../utils/process.mjs';\nimport { invariant } from 'hey-listen';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { createElement } from 'react';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\n\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\nconst visualElement = ({ treeType = \"\", build, getBaseTarget, makeTargetAnimatable, measureViewportBox, render: renderInstance, readValueFromInstance, removeValueFromRenderState, sortNodePosition, scrapeMotionValuesFromProps, }) => ({ parent, props, presenceId, blockInitialAnimation, visualState, reducedMotionConfig, }, options = {}) => {\n    let isMounted = false;\n    const { latestValues, renderState } = visualState;\n    /**\n     * The instance of the render-specific node that will be hydrated by the\n     * exposed React ref. So for example, this visual element can host a\n     * HTMLElement, plain object, or Three.js object. The functions provided\n     * in VisualElementConfig allow us to interface with this instance.\n     */\n    let instance;\n    /**\n     * Manages the subscriptions for a visual element's lifecycle, for instance\n     * onRender\n     */\n    const lifecycles = createLifecycles();\n    /**\n     * A map of all motion values attached to this visual element. Motion\n     * values are source of truth for any given animated value. A motion\n     * value might be provided externally by the component via props.\n     */\n    const values = new Map();\n    /**\n     * A map of every subscription that binds the provided or generated\n     * motion values onChange listeners to this visual element.\n     */\n    const valueSubscriptions = new Map();\n    /**\n     * A reference to the previously-provided motion values as returned\n     * from scrapeMotionValuesFromProps. We use the keys in here to determine\n     * if any motion values need to be removed after props are updated.\n     */\n    let prevMotionValues = {};\n    /**\n     * When values are removed from all animation props we need to search\n     * for a fallback value to animate to. These values are tracked in baseTarget.\n     */\n    const baseTarget = {\n        ...latestValues,\n    };\n    /**\n     * Create an object of the values we initially animated from (if initial prop present).\n     */\n    const initialValues = props.initial ? { ...latestValues } : {};\n    // Internal methods ========================\n    /**\n     * On mount, this will be hydrated with a callback to disconnect\n     * this visual element from its parent on unmount.\n     */\n    let removeFromVariantTree;\n    /**\n     * Render the element with the latest styles outside of the React\n     * render lifecycle\n     */\n    function render() {\n        if (!instance || !isMounted)\n            return;\n        triggerBuild();\n        renderInstance(instance, renderState, props.style, element.projection);\n    }\n    function triggerBuild() {\n        build(element, renderState, latestValues, options, props);\n    }\n    function update() {\n        lifecycles.notifyUpdate(latestValues);\n    }\n    /**\n     *\n     */\n    function bindToMotionValue(key, value) {\n        const removeOnChange = value.onChange((latestValue) => {\n            latestValues[key] = latestValue;\n            props.onUpdate && sync.update(update, false, true);\n        });\n        const removeOnRenderRequest = value.onRenderRequest(element.scheduleRender);\n        valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n        });\n    }\n    /**\n     * Any motion values that are provided to the element when created\n     * aren't yet bound to the element, as this would technically be impure.\n     * However, we iterate through the motion values and set them to the\n     * initial values for this component.\n     *\n     * TODO: This is impure and we should look at changing this to run on mount.\n     * Doing so will break some tests but this isn't neccessarily a breaking change,\n     * more a reflection of the test.\n     */\n    const { willChange, ...initialMotionValues } = scrapeMotionValuesFromProps(props);\n    for (const key in initialMotionValues) {\n        const value = initialMotionValues[key];\n        if (latestValues[key] !== undefined && isMotionValue(value)) {\n            value.set(latestValues[key], false);\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.add(key);\n            }\n        }\n    }\n    /**\n     * Update external values with initial values\n     */\n    if (props.values) {\n        for (const key in props.values) {\n            const value = props.values[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key]);\n            }\n        }\n    }\n    /**\n     * Determine what role this visual element should take in the variant tree.\n     */\n    const isControllingVariants$1 = isControllingVariants(props);\n    const isVariantNode$1 = isVariantNode(props);\n    const element = {\n        treeType,\n        /**\n         * This is a mirror of the internal instance prop, which keeps\n         * VisualElement type-compatible with React's RefObject.\n         */\n        current: null,\n        /**\n         * The depth of this visual element within the visual element tree.\n         */\n        depth: parent ? parent.depth + 1 : 0,\n        parent,\n        children: new Set(),\n        /**\n         *\n         */\n        presenceId,\n        shouldReduceMotion: null,\n        /**\n         * If this component is part of the variant tree, it should track\n         * any children that are also part of the tree. This is essentially\n         * a shadow tree to simplify logic around how to stagger over children.\n         */\n        variantChildren: isVariantNode$1 ? new Set() : undefined,\n        /**\n         * Whether this instance is visible. This can be changed imperatively\n         * by the projection tree, is analogous to CSS's visibility in that\n         * hidden elements should take up layout, and needs enacting by the configured\n         * render function.\n         */\n        isVisible: undefined,\n        /**\n         * Normally, if a component is controlled by a parent's variants, it can\n         * rely on that ancestor to trigger animations further down the tree.\n         * However, if a component is created after its parent is mounted, the parent\n         * won't trigger that mount animation so the child needs to.\n         *\n         * TODO: This might be better replaced with a method isParentMounted\n         */\n        manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()),\n        /**\n         * This can be set by AnimatePresence to force components that mount\n         * at the same time as it to mount as if they have initial={false} set.\n         */\n        blockInitialAnimation,\n        /**\n         * Determine whether this component has mounted yet. This is mostly used\n         * by variant children to determine whether they need to trigger their\n         * own animations on mount.\n         */\n        isMounted: () => Boolean(instance),\n        mount(newInstance) {\n            isMounted = true;\n            instance = element.current = newInstance;\n            if (element.projection) {\n                element.projection.mount(newInstance);\n            }\n            if (isVariantNode$1 && parent && !isControllingVariants$1) {\n                removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);\n            }\n            values.forEach((value, key) => bindToMotionValue(key, value));\n            if (!hasReducedMotionListener.current) {\n                initPrefersReducedMotion();\n            }\n            element.shouldReduceMotion =\n                reducedMotionConfig === \"never\"\n                    ? false\n                    : reducedMotionConfig === \"always\"\n                        ? true\n                        : prefersReducedMotion.current;\n            parent === null || parent === void 0 ? void 0 : parent.children.add(element);\n            element.setProps(props);\n        },\n        /**\n         *\n         */\n        unmount() {\n            var _a;\n            (_a = element.projection) === null || _a === void 0 ? void 0 : _a.unmount();\n            cancelSync.update(update);\n            cancelSync.render(render);\n            valueSubscriptions.forEach((remove) => remove());\n            removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();\n            parent === null || parent === void 0 ? void 0 : parent.children.delete(element);\n            lifecycles.clearAllListeners();\n            instance = undefined;\n            isMounted = false;\n        },\n        loadFeatures(renderedProps, isStrict, preloadedFeatures, projectionId, ProjectionNodeConstructor, initialLayoutGroupConfig) {\n            const features = [];\n            /**\n             * If we're in development mode, check to make sure we're not rendering a motion component\n             * as a child of LazyMotion, as this will break the file-size benefits of using it.\n             */\n            if (env !== \"production\" && preloadedFeatures && isStrict) {\n                invariant(false, \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\");\n            }\n            for (let i = 0; i < numFeatures; i++) {\n                const name = featureNames[i];\n                const { isEnabled, Component } = featureDefinitions[name];\n                /**\n                 * It might be possible in the future to use this moment to\n                 * dynamically request functionality. In initial tests this\n                 * was producing a lot of duplication amongst bundles.\n                 */\n                if (isEnabled(renderedProps) && Component) {\n                    features.push(createElement(Component, {\n                        key: name,\n                        ...renderedProps,\n                        visualElement: element,\n                    }));\n                }\n            }\n            if (!element.projection && ProjectionNodeConstructor) {\n                element.projection = new ProjectionNodeConstructor(projectionId, element.getLatestValues(), parent && parent.projection);\n                const { layoutId, layout, drag, dragConstraints, layoutScroll, } = renderedProps;\n                element.projection.setOptions({\n                    layoutId,\n                    layout,\n                    alwaysMeasureLayout: Boolean(drag) ||\n                        (dragConstraints && isRefObject(dragConstraints)),\n                    visualElement: element,\n                    scheduleRender: () => element.scheduleRender(),\n                    /**\n                     * TODO: Update options in an effect. This could be tricky as it'll be too late\n                     * to update by the time layout animations run.\n                     * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n                     * ensuring it gets called if there's no potential layout animations.\n                     *\n                     */\n                    animationType: typeof layout === \"string\" ? layout : \"both\",\n                    initialPromotionConfig: initialLayoutGroupConfig,\n                    layoutScroll,\n                });\n            }\n            return features;\n        },\n        /**\n         * Add a child visual element to our set of children.\n         */\n        addVariantChild(child) {\n            var _a;\n            const closestVariantNode = element.getClosestVariantNode();\n            if (closestVariantNode) {\n                (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n                return () => closestVariantNode.variantChildren.delete(child);\n            }\n        },\n        sortNodePosition(other) {\n            /**\n             * If these nodes aren't even of the same type we can't compare their depth.\n             */\n            if (!sortNodePosition || treeType !== other.treeType)\n                return 0;\n            return sortNodePosition(element.getInstance(), other.getInstance());\n        },\n        /**\n         * Returns the closest variant node in the tree starting from\n         * this visual element.\n         */\n        getClosestVariantNode: () => isVariantNode$1 ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode(),\n        /**\n         * Expose the latest layoutId prop.\n         */\n        getLayoutId: () => props.layoutId,\n        /**\n         * Returns the current instance.\n         */\n        getInstance: () => instance,\n        /**\n         * Get/set the latest static values.\n         */\n        getStaticValue: (key) => latestValues[key],\n        setStaticValue: (key, value) => (latestValues[key] = value),\n        /**\n         * Returns the latest motion value state. Currently only used to take\n         * a snapshot of the visual element - perhaps this can return the whole\n         * visual state\n         */\n        getLatestValues: () => latestValues,\n        /**\n         * Set the visiblity of the visual element. If it's changed, schedule\n         * a render to reflect these changes.\n         */\n        setVisibility(visibility) {\n            if (element.isVisible === visibility)\n                return;\n            element.isVisible = visibility;\n            element.scheduleRender();\n        },\n        /**\n         * Make a target animatable by Popmotion. For instance, if we're\n         * trying to animate width from 100px to 100vw we need to measure 100vw\n         * in pixels to determine what we really need to animate to. This is also\n         * pluggable to support Framer's custom value types like Color,\n         * and CSS variables.\n         */\n        makeTargetAnimatable(target, canMutate = true) {\n            return makeTargetAnimatable(element, target, props, canMutate);\n        },\n        /**\n         * Measure the current viewport box with or without transforms.\n         * Only measures axis-aligned boxes, rotate and skew must be manually\n         * removed with a re-render to work.\n         */\n        measureViewportBox() {\n            return measureViewportBox(instance, props);\n        },\n        // Motion values ========================\n        /**\n         * Add a motion value and bind it to this visual element.\n         */\n        addValue(key, value) {\n            // Remove existing value if it exists\n            if (element.hasValue(key))\n                element.removeValue(key);\n            values.set(key, value);\n            latestValues[key] = value.get();\n            bindToMotionValue(key, value);\n        },\n        /**\n         * Remove a motion value and unbind any active subscriptions.\n         */\n        removeValue(key) {\n            var _a;\n            values.delete(key);\n            (_a = valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n            valueSubscriptions.delete(key);\n            delete latestValues[key];\n            removeValueFromRenderState(key, renderState);\n        },\n        /**\n         * Check whether we have a motion value for this key\n         */\n        hasValue: (key) => values.has(key),\n        /**\n         * Get a motion value for this key. If called with a default\n         * value, we'll create one if none exists.\n         */\n        getValue(key, defaultValue) {\n            if (props.values && props.values[key]) {\n                return props.values[key];\n            }\n            let value = values.get(key);\n            if (value === undefined && defaultValue !== undefined) {\n                value = motionValue(defaultValue);\n                element.addValue(key, value);\n            }\n            return value;\n        },\n        /**\n         * Iterate over our motion values.\n         */\n        forEachValue: (callback) => values.forEach(callback),\n        /**\n         * If we're trying to animate to a previously unencountered value,\n         * we need to check for it in our state and as a last resort read it\n         * directly from the instance (which might have performance implications).\n         */\n        readValue: (key) => latestValues[key] !== undefined\n            ? latestValues[key]\n            : readValueFromInstance(instance, key, options),\n        /**\n         * Set the base target to later animate back to. This is currently\n         * only hydrated on creation and when we first read a value.\n         */\n        setBaseTarget(key, value) {\n            baseTarget[key] = value;\n        },\n        /**\n         * Find the base target for a value thats been removed from all animation\n         * props.\n         */\n        getBaseTarget(key) {\n            var _a;\n            const { initial } = props;\n            const valueFromInitial = typeof initial === \"string\" || typeof initial === \"object\"\n                ? (_a = resolveVariantFromProps(props, initial)) === null || _a === void 0 ? void 0 : _a[key]\n                : undefined;\n            /**\n             * If this value still exists in the current initial variant, read that.\n             */\n            if (initial && valueFromInitial !== undefined) {\n                return valueFromInitial;\n            }\n            /**\n             * Alternatively, if this VisualElement config has defined a getBaseTarget\n             * so we can read the value from an alternative source, try that.\n             */\n            if (getBaseTarget) {\n                const target = getBaseTarget(props, key);\n                if (target !== undefined && !isMotionValue(target))\n                    return target;\n            }\n            /**\n             * If the value was initially defined on initial, but it doesn't any more,\n             * return undefined. Otherwise return the value as initially read from the DOM.\n             */\n            return initialValues[key] !== undefined &&\n                valueFromInitial === undefined\n                ? undefined\n                : baseTarget[key];\n        },\n        // Lifecyles ========================\n        ...lifecycles,\n        /**\n         * Build the renderer state based on the latest visual state.\n         */\n        build() {\n            triggerBuild();\n            return renderState;\n        },\n        /**\n         * Schedule a render on the next animation frame.\n         */\n        scheduleRender() {\n            sync.render(render, false, true);\n        },\n        /**\n         * Synchronously fire render. It's prefered that we batch renders but\n         * in many circumstances, like layout measurement, we need to run this\n         * synchronously. However in those instances other measures should be taken\n         * to batch reads/writes.\n         */\n        syncRender: render,\n        /**\n         * Update the provided props. Ensure any newly-added motion values are\n         * added to our map, old ones removed, and listeners updated.\n         */\n        setProps(newProps) {\n            if (newProps.transformTemplate || props.transformTemplate) {\n                element.scheduleRender();\n            }\n            props = newProps;\n            lifecycles.updatePropListeners(newProps);\n            prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps(props), prevMotionValues);\n        },\n        getProps: () => props,\n        // Variants ==============================\n        /**\n         * Returns the variant definition with a given name.\n         */\n        getVariant: (name) => { var _a; return (_a = props.variants) === null || _a === void 0 ? void 0 : _a[name]; },\n        /**\n         * Returns the defined default transition on this component.\n         */\n        getDefaultTransition: () => props.transition,\n        getTransformPagePoint: () => {\n            return props.transformPagePoint;\n        },\n        /**\n         * Used by child variant nodes to get the closest ancestor variant props.\n         */\n        getVariantContext(startAtParent = false) {\n            if (startAtParent)\n                return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();\n            if (!isControllingVariants$1) {\n                const context = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};\n                if (props.initial !== undefined) {\n                    context.initial = props.initial;\n                }\n                return context;\n            }\n            const context = {};\n            for (let i = 0; i < numVariantProps; i++) {\n                const name = variantProps[i];\n                const prop = props[name];\n                if (isVariantLabel(prop) || prop === false) {\n                    context[name] = prop;\n                }\n            }\n            return context;\n        },\n    };\n    return element;\n};\nconst variantProps = [\"initial\", ...variantPriorityOrder];\nconst numVariantProps = variantProps.length;\n\nexport { visualElement };\n"]},"metadata":{},"sourceType":"module"}